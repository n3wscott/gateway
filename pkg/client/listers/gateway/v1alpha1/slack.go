/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/n3wscott/gateway/pkg/apis/gateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SlackLister helps list Slacks.
type SlackLister interface {
	// List lists all Slacks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Slack, err error)
	// Slacks returns an object that can list and get Slacks.
	Slacks(namespace string) SlackNamespaceLister
	SlackListerExpansion
}

// slackLister implements the SlackLister interface.
type slackLister struct {
	indexer cache.Indexer
}

// NewSlackLister returns a new SlackLister.
func NewSlackLister(indexer cache.Indexer) SlackLister {
	return &slackLister{indexer: indexer}
}

// List lists all Slacks in the indexer.
func (s *slackLister) List(selector labels.Selector) (ret []*v1alpha1.Slack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slack))
	})
	return ret, err
}

// Slacks returns an object that can list and get Slacks.
func (s *slackLister) Slacks(namespace string) SlackNamespaceLister {
	return slackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SlackNamespaceLister helps list and get Slacks.
type SlackNamespaceLister interface {
	// List lists all Slacks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Slack, err error)
	// Get retrieves the Slack from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Slack, error)
	SlackNamespaceListerExpansion
}

// slackNamespaceLister implements the SlackNamespaceLister
// interface.
type slackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Slacks in the indexer for a given namespace.
func (s slackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Slack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slack))
	})
	return ret, err
}

// Get retrieves the Slack from the indexer for a given namespace and name.
func (s slackNamespaceLister) Get(name string) (*v1alpha1.Slack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slack"), name)
	}
	return obj.(*v1alpha1.Slack), nil
}
