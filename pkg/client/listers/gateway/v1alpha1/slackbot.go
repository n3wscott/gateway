/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/n3wscott/gateway/pkg/apis/gateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SlackbotLister helps list Slackbots.
type SlackbotLister interface {
	// List lists all Slackbots in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Slackbot, err error)
	// Slackbots returns an object that can list and get Slackbots.
	Slackbots(namespace string) SlackbotNamespaceLister
	SlackbotListerExpansion
}

// slackbotLister implements the SlackbotLister interface.
type slackbotLister struct {
	indexer cache.Indexer
}

// NewSlackbotLister returns a new SlackbotLister.
func NewSlackbotLister(indexer cache.Indexer) SlackbotLister {
	return &slackbotLister{indexer: indexer}
}

// List lists all Slackbots in the indexer.
func (s *slackbotLister) List(selector labels.Selector) (ret []*v1alpha1.Slackbot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slackbot))
	})
	return ret, err
}

// Slackbots returns an object that can list and get Slackbots.
func (s *slackbotLister) Slackbots(namespace string) SlackbotNamespaceLister {
	return slackbotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SlackbotNamespaceLister helps list and get Slackbots.
type SlackbotNamespaceLister interface {
	// List lists all Slackbots in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Slackbot, err error)
	// Get retrieves the Slackbot from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Slackbot, error)
	SlackbotNamespaceListerExpansion
}

// slackbotNamespaceLister implements the SlackbotNamespaceLister
// interface.
type slackbotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Slackbots in the indexer for a given namespace.
func (s slackbotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Slackbot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Slackbot))
	})
	return ret, err
}

// Get retrieves the Slackbot from the indexer for a given namespace and name.
func (s slackbotNamespaceLister) Get(name string) (*v1alpha1.Slackbot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("slackbot"), name)
	}
	return obj.(*v1alpha1.Slackbot), nil
}
